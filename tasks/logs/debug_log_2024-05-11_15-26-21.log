2024-05-11 15:26:23,737 - INFO - Test 'tests/test_FirstTaskPage.py::test_first_task_first' passed
2024-05-11 15:26:52,755 - ERROR - Test 'tests/test_FirstTaskPage.py::test_first_task_second' failed: browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="9a91e25399c9d1311855dd727d244ef3")>
setup_logging = <Logger tests.conftest (DEBUG)>

    def test_first_task_second(browser, setup_logging):
        firsttaskpage = FirstTaskPage(browser)
>       output = firsttaskpage.TextLinkOpen()

tests\test_FirstTaskPage.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\FirstTaskPage.py:37: in TextLinkOpen
    self.waiter_new_url()
pages\BasePage.py:32: in waiter_new_url
    self.waiter.until(EC.url_changes(self.driver.current_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.support.wait.WebDriverWait (session="9a91e25399c9d1311855dd727d244ef3")>
method = <function url_changes.<locals>._predicate at 0x000002CC28876DE0>, message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            time.sleep(self._poll)
            if time.monotonic() > end_time:
                break
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\env\Lib\site-packages\selenium\webdriver\support\wait.py:105: TimeoutException
